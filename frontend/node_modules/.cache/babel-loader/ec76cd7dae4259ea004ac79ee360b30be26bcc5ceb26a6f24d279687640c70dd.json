{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{authAPI,tokenManager}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const isAuthenticated=!!user&&!!tokenManager.getToken();useEffect(()=>{const initAuth=async()=>{const token=tokenManager.getToken();if(token){try{const userData=await authAPI.getProfile();setUser(userData);}catch(error){tokenManager.clearTokens();}}setLoading(false);};initAuth();},[]);const login=async credentials=>{try{const authResponse=await authAPI.login(credentials);setUser(authResponse.user);}catch(error){throw error;}};const register=async userData=>{try{await authAPI.register(userData);// After registration, you might want to automatically log in the user\n}catch(error){throw error;}};const logout=()=>{authAPI.logout();setUser(null);};const value={user,login,register,logout,isAuthenticated,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","tokenManager","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","isAuthenticated","getToken","initAuth","token","userData","getProfile","error","clearTokens","login","credentials","authResponse","register","logout","value","Provider"],"sources":["/Users/srihemanthreddy/expense-tracker-app/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, LoginCredentials, RegisterData } from '../types';\nimport { authAPI, tokenManager } from '../services/api';\n\ninterface AuthContextType {\n  user: User | null;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  logout: () => void;\n  isAuthenticated: boolean;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const isAuthenticated = !!user && !!tokenManager.getToken();\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = tokenManager.getToken();\n      if (token) {\n        try {\n          const userData = await authAPI.getProfile();\n          setUser(userData);\n        } catch (error) {\n          tokenManager.clearTokens();\n        }\n      }\n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (credentials: LoginCredentials) => {\n    try {\n      const authResponse = await authAPI.login(credentials);\n      setUser(authResponse.user);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const register = async (userData: RegisterData) => {\n    try {\n      await authAPI.register(userData);\n      // After registration, you might want to automatically log in the user\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    authAPI.logout();\n    setUser(null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    login,\n    register,\n    logout,\n    isAuthenticated,\n    loading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAExF,OAASC,OAAO,CAAEC,YAAY,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAWxD,KAAM,CAAAC,WAAW,cAAGR,aAAa,CAA8BS,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGV,UAAU,CAACO,WAAW,CAAC,CACvC,GAAIG,OAAO,GAAKF,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAG,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAMD,MAAO,MAAM,CAAAE,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGf,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACgB,OAAO,CAAEC,UAAU,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CAE5C,KAAM,CAAAkB,eAAe,CAAG,CAAC,CAACJ,IAAI,EAAI,CAAC,CAACX,YAAY,CAACgB,QAAQ,CAAC,CAAC,CAE3DlB,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,QAAQ,CAAG,KAAAA,CAAA,GAAY,CAC3B,KAAM,CAAAC,KAAK,CAAGlB,YAAY,CAACgB,QAAQ,CAAC,CAAC,CACrC,GAAIE,KAAK,CAAE,CACT,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAApB,OAAO,CAACqB,UAAU,CAAC,CAAC,CAC3CR,OAAO,CAACO,QAAQ,CAAC,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdrB,YAAY,CAACsB,WAAW,CAAC,CAAC,CAC5B,CACF,CACAR,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAEDG,QAAQ,CAAC,CAAC,CACZ,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAM,KAAK,CAAG,KAAO,CAAAC,WAA6B,EAAK,CACrD,GAAI,CACF,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAA1B,OAAO,CAACwB,KAAK,CAACC,WAAW,CAAC,CACrDZ,OAAO,CAACa,YAAY,CAACd,IAAI,CAAC,CAC5B,CAAE,MAAOU,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAK,QAAQ,CAAG,KAAO,CAAAP,QAAsB,EAAK,CACjD,GAAI,CACF,KAAM,CAAApB,OAAO,CAAC2B,QAAQ,CAACP,QAAQ,CAAC,CAChC;AACF,CAAE,MAAOE,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAM,MAAM,CAAGA,CAAA,GAAM,CACnB5B,OAAO,CAAC4B,MAAM,CAAC,CAAC,CAChBf,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED,KAAM,CAAAgB,KAAsB,CAAG,CAC7BjB,IAAI,CACJY,KAAK,CACLG,QAAQ,CACRC,MAAM,CACNZ,eAAe,CACfF,OACF,CAAC,CAED,mBACEX,IAAA,CAACC,WAAW,CAAC0B,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAlB,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}