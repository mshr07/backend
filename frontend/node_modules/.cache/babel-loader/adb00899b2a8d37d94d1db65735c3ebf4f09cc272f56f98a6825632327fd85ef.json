{"ast":null,"code":"var _jsxFileName = \"/Users/srihemanthreddy/expense-tracker-app/frontend/src/contexts/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Check for saved theme preference or default to light mode\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('expense-tracker-theme');\n    if (savedTheme === 'dark' || savedTheme === 'light') {\n      return savedTheme;\n    }\n\n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    return 'light';\n  });\n\n  // Apply theme to document root\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    document.body.className = theme;\n    localStorage.setItem('expense-tracker-theme', theme);\n  }, [theme]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      // Only auto-switch if user hasn't manually set a preference\n      const savedTheme = localStorage.getItem('expense-tracker-theme');\n      if (!savedTheme) {\n        setTheme(e.matches ? 'dark' : 'light');\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  const isDarkMode = theme === 'dark';\n  const value = {\n    theme,\n    toggleTheme,\n    isDarkMode\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"m9Sxvzgj/Dx3hbi1avwLIZqSt20=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","useTheme","_s","context","Error","ThemeProvider","children","_s2","theme","setTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","document","documentElement","setAttribute","body","className","setItem","mediaQuery","handleChange","e","addEventListener","removeEventListener","toggleTheme","prevTheme","isDarkMode","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/srihemanthreddy/expense-tracker-app/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  isDarkMode: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  // Check for saved theme preference or default to light mode\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('expense-tracker-theme');\n    if (savedTheme === 'dark' || savedTheme === 'light') {\n      return savedTheme;\n    }\n    \n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    \n    return 'light';\n  });\n\n  // Apply theme to document root\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    document.body.className = theme;\n    localStorage.setItem('expense-tracker-theme', theme);\n  }, [theme]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      // Only auto-switch if user hasn't manually set a preference\n      const savedTheme = localStorage.getItem('expense-tracker-theme');\n      if (!savedTheme) {\n        setTheme(e.matches ? 'dark' : 'light');\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  const isDarkMode = theme === 'dark';\n\n  const value: ThemeContextType = {\n    theme,\n    toggleTheme,\n    isDarkMode,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUzF,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAE3E,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGT,UAAU,CAACK,YAAY,CAAC;EACxC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAYrB,OAAO,MAAMI,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3E;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAQ,MAAM;IAC9C,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;IAChE,IAAIF,UAAU,KAAK,MAAM,IAAIA,UAAU,KAAK,OAAO,EAAE;MACnD,OAAOA,UAAU;IACnB;;IAEA;IACA,IAAIG,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MAClF,OAAO,MAAM;IACf;IAEA,OAAO,OAAO;EAChB,CAAC,CAAC;;EAEF;EACAnB,SAAS,CAAC,MAAM;IACdoB,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEV,KAAK,CAAC;IAC1DQ,QAAQ,CAACG,IAAI,CAACC,SAAS,GAAGZ,KAAK;IAC/BG,YAAY,CAACU,OAAO,CAAC,uBAAuB,EAAEb,KAAK,CAAC;EACtD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACAZ,SAAS,CAAC,MAAM;IACd,MAAM0B,UAAU,GAAGT,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,MAAMS,YAAY,GAAIC,CAAsB,IAAK;MAC/C;MACA,MAAMd,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;MAChE,IAAI,CAACF,UAAU,EAAE;QACfD,QAAQ,CAACe,CAAC,CAACT,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;MACxC;IACF,CAAC;IAEDO,UAAU,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IACnD,OAAO,MAAMD,UAAU,CAACI,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBlB,QAAQ,CAACmB,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjE,CAAC;EAED,MAAMC,UAAU,GAAGrB,KAAK,KAAK,MAAM;EAEnC,MAAMsB,KAAuB,GAAG;IAC9BtB,KAAK;IACLmB,WAAW;IACXE;EACF,CAAC;EAED,oBACE/B,OAAA,CAACC,YAAY,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAxB,QAAA,EACjCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC5B,GAAA,CAvDWF,aAA2C;AAAA+B,EAAA,GAA3C/B,aAA2C;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}