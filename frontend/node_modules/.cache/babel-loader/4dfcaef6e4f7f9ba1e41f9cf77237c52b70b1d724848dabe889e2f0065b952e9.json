{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Token management\nconst TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nexport const tokenManager = {\n  getToken: () => localStorage.getItem(TOKEN_KEY),\n  setToken: token => localStorage.setItem(TOKEN_KEY, token),\n  getRefreshToken: () => localStorage.getItem(REFRESH_TOKEN_KEY),\n  setRefreshToken: token => localStorage.setItem(REFRESH_TOKEN_KEY, token),\n  clearTokens: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\n  }\n};\n\n// Request interceptor to add token\napi.interceptors.request.use(config => {\n  const token = tokenManager.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const refreshToken = tokenManager.getRefreshToken();\n    if (refreshToken) {\n      try {\n        const response = await axios.post(`${API_BASE_URL}/auth/refresh/`, {\n          refresh: refreshToken\n        });\n        const {\n          access\n        } = response.data;\n        tokenManager.setToken(access);\n        return api(originalRequest);\n      } catch (refreshError) {\n        tokenManager.clearTokens();\n        window.location.href = '/login';\n      }\n    } else {\n      tokenManager.clearTokens();\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post('/auth/login/', credentials);\n    const {\n      access,\n      refresh,\n      user\n    } = response.data;\n    tokenManager.setToken(access);\n    tokenManager.setRefreshToken(refresh);\n    return {\n      access,\n      refresh,\n      user\n    };\n  },\n  register: async userData => {\n    const response = await api.post('/auth/register/', userData);\n    return response.data;\n  },\n  logout: () => {\n    tokenManager.clearTokens();\n  },\n  getProfile: async () => {\n    const response = await api.get('/auth/profile/');\n    return response.data;\n  }\n};\n\n// Categories API\nexport const categoriesAPI = {\n  getAll: async () => {\n    const response = await api.get('/categories/');\n    return response.data;\n  },\n  create: async categoryData => {\n    const response = await api.post('/categories/', categoryData);\n    return response.data;\n  },\n  update: async (id, categoryData) => {\n    const response = await api.put(`/categories/${id}/`, categoryData);\n    return response.data;\n  },\n  delete: async id => {\n    await api.delete(`/categories/${id}/`);\n  }\n};\n\n// Expenses API\nexport const expensesAPI = {\n  getAll: async filters => {\n    const params = new URLSearchParams();\n    if (filters !== null && filters !== void 0 && filters.search) params.append('search', filters.search);\n    if (filters !== null && filters !== void 0 && filters.category) params.append('category', filters.category.toString());\n    if (filters !== null && filters !== void 0 && filters.sort_by) params.append('ordering', filters.sort_by);\n    const response = await api.get(`/expenses/?${params.toString()}`);\n    return response.data;\n  },\n  getById: async id => {\n    const response = await api.get(`/expenses/${id}/`);\n    return response.data;\n  },\n  create: async expenseData => {\n    const response = await api.post('/expenses/', expenseData);\n    return response.data;\n  },\n  update: async (id, expenseData) => {\n    const response = await api.put(`/expenses/${id}/`, expenseData);\n    return response.data;\n  },\n  delete: async id => {\n    await api.delete(`/expenses/${id}/`);\n  },\n  getHistory: async filters => {\n    const params = new URLSearchParams();\n    if (filters !== null && filters !== void 0 && filters.search) params.append('search', filters.search);\n    if (filters !== null && filters !== void 0 && filters.category) params.append('category', filters.category.toString());\n    if (filters !== null && filters !== void 0 && filters.start_date) params.append('start_date', filters.start_date);\n    if (filters !== null && filters !== void 0 && filters.end_date) params.append('end_date', filters.end_date);\n    if (filters !== null && filters !== void 0 && filters.sort_by) params.append('sort_by', filters.sort_by);\n    const response = await api.get(`/expenses/history/?${params.toString()}`);\n    return response.data;\n  },\n  getStats: async () => {\n    const response = await api.get('/expenses/stats/');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","TOKEN_KEY","REFRESH_TOKEN_KEY","tokenManager","getToken","localStorage","getItem","setToken","token","setItem","getRefreshToken","setRefreshToken","clearTokens","removeItem","interceptors","request","use","config","Authorization","response","error","_error$response","originalRequest","status","_retry","refreshToken","post","refresh","access","data","refreshError","window","location","href","Promise","reject","authAPI","login","credentials","user","register","userData","logout","getProfile","get","categoriesAPI","getAll","categoryData","update","id","put","delete","expensesAPI","filters","params","URLSearchParams","search","append","category","toString","sort_by","getById","expenseData","getHistory","start_date","end_date","getStats"],"sources":["/Users/srihemanthreddy/expense-tracker-app/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { User, Expense, ExpenseCategory, LoginCredentials, RegisterData, AuthResponse, ExpenseFilters } from '../types';\n\nconst API_BASE_URL = 'http://localhost:8001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Token management\nconst TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\n\nexport const tokenManager = {\n  getToken: () => localStorage.getItem(TOKEN_KEY),\n  setToken: (token: string) => localStorage.setItem(TOKEN_KEY, token),\n  getRefreshToken: () => localStorage.getItem(REFRESH_TOKEN_KEY),\n  setRefreshToken: (token: string) => localStorage.setItem(REFRESH_TOKEN_KEY, token),\n  clearTokens: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\n  },\n};\n\n// Request interceptor to add token\napi.interceptors.request.use((config) => {\n  const token = tokenManager.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      const refreshToken = tokenManager.getRefreshToken();\n      if (refreshToken) {\n        try {\n          const response = await axios.post(`${API_BASE_URL}/auth/refresh/`, {\n            refresh: refreshToken,\n          });\n          \n          const { access } = response.data;\n          tokenManager.setToken(access);\n          \n          return api(originalRequest);\n        } catch (refreshError) {\n          tokenManager.clearTokens();\n          window.location.href = '/login';\n        }\n      } else {\n        tokenManager.clearTokens();\n        window.location.href = '/login';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const response = await api.post('/auth/login/', credentials);\n    const { access, refresh, user } = response.data;\n    tokenManager.setToken(access);\n    tokenManager.setRefreshToken(refresh);\n    return { access, refresh, user };\n  },\n\n  register: async (userData: RegisterData): Promise<User> => {\n    const response = await api.post('/auth/register/', userData);\n    return response.data;\n  },\n\n  logout: () => {\n    tokenManager.clearTokens();\n  },\n\n  getProfile: async (): Promise<User> => {\n    const response = await api.get('/auth/profile/');\n    return response.data;\n  },\n};\n\n// Categories API\nexport const categoriesAPI = {\n  getAll: async (): Promise<ExpenseCategory[]> => {\n    const response = await api.get('/categories/');\n    return response.data;\n  },\n\n  create: async (categoryData: Omit<ExpenseCategory, 'id' | 'created_at' | 'updated_at'>): Promise<ExpenseCategory> => {\n    const response = await api.post('/categories/', categoryData);\n    return response.data;\n  },\n\n  update: async (id: number, categoryData: Partial<ExpenseCategory>): Promise<ExpenseCategory> => {\n    const response = await api.put(`/categories/${id}/`, categoryData);\n    return response.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/categories/${id}/`);\n  },\n};\n\n// Expenses API\nexport const expensesAPI = {\n  getAll: async (filters?: ExpenseFilters): Promise<Expense[]> => {\n    const params = new URLSearchParams();\n    if (filters?.search) params.append('search', filters.search);\n    if (filters?.category) params.append('category', filters.category.toString());\n    if (filters?.sort_by) params.append('ordering', filters.sort_by);\n    \n    const response = await api.get(`/expenses/?${params.toString()}`);\n    return response.data;\n  },\n\n  getById: async (id: number): Promise<Expense> => {\n    const response = await api.get(`/expenses/${id}/`);\n    return response.data;\n  },\n\n  create: async (expenseData: Omit<Expense, 'id' | 'user' | 'user_username' | 'category_name' | 'created_at' | 'updated_at'>): Promise<Expense> => {\n    const response = await api.post('/expenses/', expenseData);\n    return response.data;\n  },\n\n  update: async (id: number, expenseData: Partial<Expense>): Promise<Expense> => {\n    const response = await api.put(`/expenses/${id}/`, expenseData);\n    return response.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/expenses/${id}/`);\n  },\n\n  getHistory: async (filters?: ExpenseFilters): Promise<Expense[]> => {\n    const params = new URLSearchParams();\n    if (filters?.search) params.append('search', filters.search);\n    if (filters?.category) params.append('category', filters.category.toString());\n    if (filters?.start_date) params.append('start_date', filters.start_date);\n    if (filters?.end_date) params.append('end_date', filters.end_date);\n    if (filters?.sort_by) params.append('sort_by', filters.sort_by);\n    \n    const response = await api.get(`/expenses/history/?${params.toString()}`);\n    return response.data;\n  },\n\n  getStats: async () => {\n    const response = await api.get('/expenses/stats/');\n    return response.data;\n  },\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,SAAS,GAAG,cAAc;AAChC,MAAMC,iBAAiB,GAAG,eAAe;AAEzC,OAAO,MAAMC,YAAY,GAAG;EAC1BC,QAAQ,EAAEA,CAAA,KAAMC,YAAY,CAACC,OAAO,CAACL,SAAS,CAAC;EAC/CM,QAAQ,EAAGC,KAAa,IAAKH,YAAY,CAACI,OAAO,CAACR,SAAS,EAAEO,KAAK,CAAC;EACnEE,eAAe,EAAEA,CAAA,KAAML,YAAY,CAACC,OAAO,CAACJ,iBAAiB,CAAC;EAC9DS,eAAe,EAAGH,KAAa,IAAKH,YAAY,CAACI,OAAO,CAACP,iBAAiB,EAAEM,KAAK,CAAC;EAClFI,WAAW,EAAEA,CAAA,KAAM;IACjBP,YAAY,CAACQ,UAAU,CAACZ,SAAS,CAAC;IAClCI,YAAY,CAACQ,UAAU,CAACX,iBAAiB,CAAC;EAC5C;AACF,CAAC;;AAED;AACAL,GAAG,CAACiB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMT,KAAK,GAAGL,YAAY,CAACC,QAAQ,CAAC,CAAC;EACrC,IAAII,KAAK,EAAE;IACTS,MAAM,CAACjB,OAAO,CAACkB,aAAa,GAAG,UAAUV,KAAK,EAAE;EAClD;EACA,OAAOS,MAAM;AACf,CAAC,CAAC;;AAEF;AACApB,GAAG,CAACiB,YAAY,CAACK,QAAQ,CAACH,GAAG,CAC1BG,QAAQ,IAAKA,QAAQ,EACtB,MAAOC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACf,MAAMC,eAAe,GAAGF,KAAK,CAACH,MAAM;EAEpC,IAAI,EAAAI,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,MAAMC,YAAY,GAAGtB,YAAY,CAACO,eAAe,CAAC,CAAC;IACnD,IAAIe,YAAY,EAAE;MAChB,IAAI;QACF,MAAMN,QAAQ,GAAG,MAAMxB,KAAK,CAAC+B,IAAI,CAAC,GAAG9B,YAAY,gBAAgB,EAAE;UACjE+B,OAAO,EAAEF;QACX,CAAC,CAAC;QAEF,MAAM;UAAEG;QAAO,CAAC,GAAGT,QAAQ,CAACU,IAAI;QAChC1B,YAAY,CAACI,QAAQ,CAACqB,MAAM,CAAC;QAE7B,OAAO/B,GAAG,CAACyB,eAAe,CAAC;MAC7B,CAAC,CAAC,OAAOQ,YAAY,EAAE;QACrB3B,YAAY,CAACS,WAAW,CAAC,CAAC;QAC1BmB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC;IACF,CAAC,MAAM;MACL9B,YAAY,CAACS,WAAW,CAAC,CAAC;MAC1BmB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMgB,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,WAA6B,IAA4B;IACrE,MAAMnB,QAAQ,GAAG,MAAMtB,GAAG,CAAC6B,IAAI,CAAC,cAAc,EAAEY,WAAW,CAAC;IAC5D,MAAM;MAAEV,MAAM;MAAED,OAAO;MAAEY;IAAK,CAAC,GAAGpB,QAAQ,CAACU,IAAI;IAC/C1B,YAAY,CAACI,QAAQ,CAACqB,MAAM,CAAC;IAC7BzB,YAAY,CAACQ,eAAe,CAACgB,OAAO,CAAC;IACrC,OAAO;MAAEC,MAAM;MAAED,OAAO;MAAEY;IAAK,CAAC;EAClC,CAAC;EAEDC,QAAQ,EAAE,MAAOC,QAAsB,IAAoB;IACzD,MAAMtB,QAAQ,GAAG,MAAMtB,GAAG,CAAC6B,IAAI,CAAC,iBAAiB,EAAEe,QAAQ,CAAC;IAC5D,OAAOtB,QAAQ,CAACU,IAAI;EACtB,CAAC;EAEDa,MAAM,EAAEA,CAAA,KAAM;IACZvC,YAAY,CAACS,WAAW,CAAC,CAAC;EAC5B,CAAC;EAED+B,UAAU,EAAE,MAAAA,CAAA,KAA2B;IACrC,MAAMxB,QAAQ,GAAG,MAAMtB,GAAG,CAAC+C,GAAG,CAAC,gBAAgB,CAAC;IAChD,OAAOzB,QAAQ,CAACU,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMgB,aAAa,GAAG;EAC3BC,MAAM,EAAE,MAAAA,CAAA,KAAwC;IAC9C,MAAM3B,QAAQ,GAAG,MAAMtB,GAAG,CAAC+C,GAAG,CAAC,cAAc,CAAC;IAC9C,OAAOzB,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED/B,MAAM,EAAE,MAAOiD,YAAuE,IAA+B;IACnH,MAAM5B,QAAQ,GAAG,MAAMtB,GAAG,CAAC6B,IAAI,CAAC,cAAc,EAAEqB,YAAY,CAAC;IAC7D,OAAO5B,QAAQ,CAACU,IAAI;EACtB,CAAC;EAEDmB,MAAM,EAAE,MAAAA,CAAOC,EAAU,EAAEF,YAAsC,KAA+B;IAC9F,MAAM5B,QAAQ,GAAG,MAAMtB,GAAG,CAACqD,GAAG,CAAC,eAAeD,EAAE,GAAG,EAAEF,YAAY,CAAC;IAClE,OAAO5B,QAAQ,CAACU,IAAI;EACtB,CAAC;EAEDsB,MAAM,EAAE,MAAOF,EAAU,IAAoB;IAC3C,MAAMpD,GAAG,CAACsD,MAAM,CAAC,eAAeF,EAAE,GAAG,CAAC;EACxC;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG;EACzBN,MAAM,EAAE,MAAOO,OAAwB,IAAyB;IAC9D,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIF,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEG,MAAM,EAAEF,MAAM,CAACG,MAAM,CAAC,QAAQ,EAAEJ,OAAO,CAACG,MAAM,CAAC;IAC5D,IAAIH,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEK,QAAQ,EAAEJ,MAAM,CAACG,MAAM,CAAC,UAAU,EAAEJ,OAAO,CAACK,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC7E,IAAIN,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEO,OAAO,EAAEN,MAAM,CAACG,MAAM,CAAC,UAAU,EAAEJ,OAAO,CAACO,OAAO,CAAC;IAEhE,MAAMzC,QAAQ,GAAG,MAAMtB,GAAG,CAAC+C,GAAG,CAAC,cAAcU,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAE,CAAC;IACjE,OAAOxC,QAAQ,CAACU,IAAI;EACtB,CAAC;EAEDgC,OAAO,EAAE,MAAOZ,EAAU,IAAuB;IAC/C,MAAM9B,QAAQ,GAAG,MAAMtB,GAAG,CAAC+C,GAAG,CAAC,aAAaK,EAAE,GAAG,CAAC;IAClD,OAAO9B,QAAQ,CAACU,IAAI;EACtB,CAAC;EAED/B,MAAM,EAAE,MAAOgE,WAA2G,IAAuB;IAC/I,MAAM3C,QAAQ,GAAG,MAAMtB,GAAG,CAAC6B,IAAI,CAAC,YAAY,EAAEoC,WAAW,CAAC;IAC1D,OAAO3C,QAAQ,CAACU,IAAI;EACtB,CAAC;EAEDmB,MAAM,EAAE,MAAAA,CAAOC,EAAU,EAAEa,WAA6B,KAAuB;IAC7E,MAAM3C,QAAQ,GAAG,MAAMtB,GAAG,CAACqD,GAAG,CAAC,aAAaD,EAAE,GAAG,EAAEa,WAAW,CAAC;IAC/D,OAAO3C,QAAQ,CAACU,IAAI;EACtB,CAAC;EAEDsB,MAAM,EAAE,MAAOF,EAAU,IAAoB;IAC3C,MAAMpD,GAAG,CAACsD,MAAM,CAAC,aAAaF,EAAE,GAAG,CAAC;EACtC,CAAC;EAEDc,UAAU,EAAE,MAAOV,OAAwB,IAAyB;IAClE,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIF,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEG,MAAM,EAAEF,MAAM,CAACG,MAAM,CAAC,QAAQ,EAAEJ,OAAO,CAACG,MAAM,CAAC;IAC5D,IAAIH,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEK,QAAQ,EAAEJ,MAAM,CAACG,MAAM,CAAC,UAAU,EAAEJ,OAAO,CAACK,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC7E,IAAIN,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEW,UAAU,EAAEV,MAAM,CAACG,MAAM,CAAC,YAAY,EAAEJ,OAAO,CAACW,UAAU,CAAC;IACxE,IAAIX,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEY,QAAQ,EAAEX,MAAM,CAACG,MAAM,CAAC,UAAU,EAAEJ,OAAO,CAACY,QAAQ,CAAC;IAClE,IAAIZ,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEO,OAAO,EAAEN,MAAM,CAACG,MAAM,CAAC,SAAS,EAAEJ,OAAO,CAACO,OAAO,CAAC;IAE/D,MAAMzC,QAAQ,GAAG,MAAMtB,GAAG,CAAC+C,GAAG,CAAC,sBAAsBU,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAE,CAAC;IACzE,OAAOxC,QAAQ,CAACU,IAAI;EACtB,CAAC;EAEDqC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAM/C,QAAQ,GAAG,MAAMtB,GAAG,CAAC+C,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOzB,QAAQ,CAACU,IAAI;EACtB;AACF,CAAC;AAED,eAAehC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}