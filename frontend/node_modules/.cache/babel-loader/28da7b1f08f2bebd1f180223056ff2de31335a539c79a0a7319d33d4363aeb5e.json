{"ast":null,"code":"import axios from'axios';const API_BASE_URL='http://localhost:8001/api';// Create axios instance\nconst api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Token management\nconst TOKEN_KEY='access_token';const REFRESH_TOKEN_KEY='refresh_token';export const tokenManager={getToken:()=>localStorage.getItem(TOKEN_KEY),setToken:token=>localStorage.setItem(TOKEN_KEY,token),getRefreshToken:()=>localStorage.getItem(REFRESH_TOKEN_KEY),setRefreshToken:token=>localStorage.setItem(REFRESH_TOKEN_KEY,token),clearTokens:()=>{localStorage.removeItem(TOKEN_KEY);localStorage.removeItem(REFRESH_TOKEN_KEY);}};// Request interceptor to add token\napi.interceptors.request.use(config=>{const token=tokenManager.getToken();if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});// Response interceptor to handle token refresh\napi.interceptors.response.use(response=>response,async error=>{var _error$response;const originalRequest=error.config;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){originalRequest._retry=true;const refreshToken=tokenManager.getRefreshToken();if(refreshToken){try{const response=await axios.post(\"\".concat(API_BASE_URL,\"/auth/refresh/\"),{refresh:refreshToken});const{access}=response.data;tokenManager.setToken(access);return api(originalRequest);}catch(refreshError){tokenManager.clearTokens();window.location.href='/login';}}else{tokenManager.clearTokens();window.location.href='/login';}}return Promise.reject(error);});// Auth API\nexport const authAPI={login:async credentials=>{const response=await api.post('/auth/login/',credentials);const{access,refresh,user}=response.data;tokenManager.setToken(access);tokenManager.setRefreshToken(refresh);return{access,refresh,user};},register:async userData=>{const response=await api.post('/auth/register/',userData);return response.data;},logout:()=>{tokenManager.clearTokens();},getProfile:async()=>{const response=await api.get('/auth/profile/');return response.data;}};// Categories API\nexport const categoriesAPI={getAll:async()=>{const response=await api.get('/categories/');return response.data;},create:async categoryData=>{const response=await api.post('/categories/',categoryData);return response.data;},update:async(id,categoryData)=>{const response=await api.put(\"/categories/\".concat(id,\"/\"),categoryData);return response.data;},delete:async id=>{await api.delete(\"/categories/\".concat(id,\"/\"));}};// Expenses API\nexport const expensesAPI={getAll:async filters=>{const params=new URLSearchParams();if(filters!==null&&filters!==void 0&&filters.search)params.append('search',filters.search);if(filters!==null&&filters!==void 0&&filters.category)params.append('category',filters.category.toString());if(filters!==null&&filters!==void 0&&filters.sort_by)params.append('ordering',filters.sort_by);const response=await api.get(\"/expenses/?\".concat(params.toString()));return response.data;},getById:async id=>{const response=await api.get(\"/expenses/\".concat(id,\"/\"));return response.data;},create:async expenseData=>{const response=await api.post('/expenses/',expenseData);return response.data;},update:async(id,expenseData)=>{const response=await api.put(\"/expenses/\".concat(id,\"/\"),expenseData);return response.data;},delete:async id=>{await api.delete(\"/expenses/\".concat(id,\"/\"));},getHistory:async filters=>{const params=new URLSearchParams();if(filters!==null&&filters!==void 0&&filters.search)params.append('search',filters.search);if(filters!==null&&filters!==void 0&&filters.category)params.append('category',filters.category.toString());if(filters!==null&&filters!==void 0&&filters.start_date)params.append('start_date',filters.start_date);if(filters!==null&&filters!==void 0&&filters.end_date)params.append('end_date',filters.end_date);if(filters!==null&&filters!==void 0&&filters.sort_by)params.append('sort_by',filters.sort_by);const response=await api.get(\"/expenses/history/?\".concat(params.toString()));return response.data;},getStats:async()=>{const response=await api.get('/expenses/stats/');return response.data;}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","TOKEN_KEY","REFRESH_TOKEN_KEY","tokenManager","getToken","localStorage","getItem","setToken","token","setItem","getRefreshToken","setRefreshToken","clearTokens","removeItem","interceptors","request","use","config","Authorization","concat","response","error","_error$response","originalRequest","status","_retry","refreshToken","post","refresh","access","data","refreshError","window","location","href","Promise","reject","authAPI","login","credentials","user","register","userData","logout","getProfile","get","categoriesAPI","getAll","categoryData","update","id","put","delete","expensesAPI","filters","params","URLSearchParams","search","append","category","toString","sort_by","getById","expenseData","getHistory","start_date","end_date","getStats"],"sources":["/Users/srihemanthreddy/expense-tracker-app/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { User, Expense, ExpenseCategory, LoginCredentials, RegisterData, AuthResponse, ExpenseFilters } from '../types';\n\nconst API_BASE_URL = 'http://localhost:8001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Token management\nconst TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\n\nexport const tokenManager = {\n  getToken: () => localStorage.getItem(TOKEN_KEY),\n  setToken: (token: string) => localStorage.setItem(TOKEN_KEY, token),\n  getRefreshToken: () => localStorage.getItem(REFRESH_TOKEN_KEY),\n  setRefreshToken: (token: string) => localStorage.setItem(REFRESH_TOKEN_KEY, token),\n  clearTokens: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\n  },\n};\n\n// Request interceptor to add token\napi.interceptors.request.use((config) => {\n  const token = tokenManager.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      const refreshToken = tokenManager.getRefreshToken();\n      if (refreshToken) {\n        try {\n          const response = await axios.post(`${API_BASE_URL}/auth/refresh/`, {\n            refresh: refreshToken,\n          });\n          \n          const { access } = response.data;\n          tokenManager.setToken(access);\n          \n          return api(originalRequest);\n        } catch (refreshError) {\n          tokenManager.clearTokens();\n          window.location.href = '/login';\n        }\n      } else {\n        tokenManager.clearTokens();\n        window.location.href = '/login';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const response = await api.post('/auth/login/', credentials);\n    const { access, refresh, user } = response.data;\n    tokenManager.setToken(access);\n    tokenManager.setRefreshToken(refresh);\n    return { access, refresh, user };\n  },\n\n  register: async (userData: RegisterData): Promise<User> => {\n    const response = await api.post('/auth/register/', userData);\n    return response.data;\n  },\n\n  logout: () => {\n    tokenManager.clearTokens();\n  },\n\n  getProfile: async (): Promise<User> => {\n    const response = await api.get('/auth/profile/');\n    return response.data;\n  },\n};\n\n// Categories API\nexport const categoriesAPI = {\n  getAll: async (): Promise<ExpenseCategory[]> => {\n    const response = await api.get('/categories/');\n    return response.data;\n  },\n\n  create: async (categoryData: Omit<ExpenseCategory, 'id' | 'created_at' | 'updated_at'>): Promise<ExpenseCategory> => {\n    const response = await api.post('/categories/', categoryData);\n    return response.data;\n  },\n\n  update: async (id: number, categoryData: Partial<ExpenseCategory>): Promise<ExpenseCategory> => {\n    const response = await api.put(`/categories/${id}/`, categoryData);\n    return response.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/categories/${id}/`);\n  },\n};\n\n// Expenses API\nexport const expensesAPI = {\n  getAll: async (filters?: ExpenseFilters): Promise<Expense[]> => {\n    const params = new URLSearchParams();\n    if (filters?.search) params.append('search', filters.search);\n    if (filters?.category) params.append('category', filters.category.toString());\n    if (filters?.sort_by) params.append('ordering', filters.sort_by);\n    \n    const response = await api.get(`/expenses/?${params.toString()}`);\n    return response.data;\n  },\n\n  getById: async (id: number): Promise<Expense> => {\n    const response = await api.get(`/expenses/${id}/`);\n    return response.data;\n  },\n\n  create: async (expenseData: {\n    name: string;\n    description?: string;\n    amount: string;\n    date: string;\n    category?: number;\n  }): Promise<Expense> => {\n    const response = await api.post('/expenses/', expenseData);\n    return response.data;\n  },\n\n  update: async (id: number, expenseData: {\n    name?: string;\n    description?: string;\n    amount?: string;\n    date?: string;\n    category?: number;\n  }): Promise<Expense> => {\n    const response = await api.put(`/expenses/${id}/`, expenseData);\n    return response.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/expenses/${id}/`);\n  },\n\n  getHistory: async (filters?: ExpenseFilters): Promise<Expense[]> => {\n    const params = new URLSearchParams();\n    if (filters?.search) params.append('search', filters.search);\n    if (filters?.category) params.append('category', filters.category.toString());\n    if (filters?.start_date) params.append('start_date', filters.start_date);\n    if (filters?.end_date) params.append('end_date', filters.end_date);\n    if (filters?.sort_by) params.append('sort_by', filters.sort_by);\n    \n    const response = await api.get(`/expenses/history/?${params.toString()}`);\n    return response.data;\n  },\n\n  getStats: async () => {\n    const response = await api.get('/expenses/stats/');\n    return response.data;\n  },\n};\n\nexport default api;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB,KAAM,CAAAC,YAAY,CAAG,2BAA2B,CAEhD;AACA,KAAM,CAAAC,GAAG,CAAGF,KAAK,CAACG,MAAM,CAAC,CACvBC,OAAO,CAAEH,YAAY,CACrBI,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,SAAS,CAAG,cAAc,CAChC,KAAM,CAAAC,iBAAiB,CAAG,eAAe,CAEzC,MAAO,MAAM,CAAAC,YAAY,CAAG,CAC1BC,QAAQ,CAAEA,CAAA,GAAMC,YAAY,CAACC,OAAO,CAACL,SAAS,CAAC,CAC/CM,QAAQ,CAAGC,KAAa,EAAKH,YAAY,CAACI,OAAO,CAACR,SAAS,CAAEO,KAAK,CAAC,CACnEE,eAAe,CAAEA,CAAA,GAAML,YAAY,CAACC,OAAO,CAACJ,iBAAiB,CAAC,CAC9DS,eAAe,CAAGH,KAAa,EAAKH,YAAY,CAACI,OAAO,CAACP,iBAAiB,CAAEM,KAAK,CAAC,CAClFI,WAAW,CAAEA,CAAA,GAAM,CACjBP,YAAY,CAACQ,UAAU,CAACZ,SAAS,CAAC,CAClCI,YAAY,CAACQ,UAAU,CAACX,iBAAiB,CAAC,CAC5C,CACF,CAAC,CAED;AACAL,GAAG,CAACiB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,EAAK,CACvC,KAAM,CAAAT,KAAK,CAAGL,YAAY,CAACC,QAAQ,CAAC,CAAC,CACrC,GAAII,KAAK,CAAE,CACTS,MAAM,CAACjB,OAAO,CAACkB,aAAa,WAAAC,MAAA,CAAaX,KAAK,CAAE,CAClD,CACA,MAAO,CAAAS,MAAM,CACf,CAAC,CAAC,CAEF;AACApB,GAAG,CAACiB,YAAY,CAACM,QAAQ,CAACJ,GAAG,CAC1BI,QAAQ,EAAKA,QAAQ,CACtB,KAAO,CAAAC,KAAK,EAAK,KAAAC,eAAA,CACf,KAAM,CAAAC,eAAe,CAAGF,KAAK,CAACJ,MAAM,CAEpC,GAAI,EAAAK,eAAA,CAAAD,KAAK,CAACD,QAAQ,UAAAE,eAAA,iBAAdA,eAAA,CAAgBE,MAAM,IAAK,GAAG,EAAI,CAACD,eAAe,CAACE,MAAM,CAAE,CAC7DF,eAAe,CAACE,MAAM,CAAG,IAAI,CAE7B,KAAM,CAAAC,YAAY,CAAGvB,YAAY,CAACO,eAAe,CAAC,CAAC,CACnD,GAAIgB,YAAY,CAAE,CAChB,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAzB,KAAK,CAACgC,IAAI,IAAAR,MAAA,CAAIvB,YAAY,mBAAkB,CACjEgC,OAAO,CAAEF,YACX,CAAC,CAAC,CAEF,KAAM,CAAEG,MAAO,CAAC,CAAGT,QAAQ,CAACU,IAAI,CAChC3B,YAAY,CAACI,QAAQ,CAACsB,MAAM,CAAC,CAE7B,MAAO,CAAAhC,GAAG,CAAC0B,eAAe,CAAC,CAC7B,CAAE,MAAOQ,YAAY,CAAE,CACrB5B,YAAY,CAACS,WAAW,CAAC,CAAC,CAC1BoB,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CACF,CAAC,IAAM,CACL/B,YAAY,CAACS,WAAW,CAAC,CAAC,CAC1BoB,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CACF,CAEA,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAgB,OAAO,CAAG,CACrBC,KAAK,CAAE,KAAO,CAAAC,WAA6B,EAA4B,CACrE,KAAM,CAAAnB,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAAC8B,IAAI,CAAC,cAAc,CAAEY,WAAW,CAAC,CAC5D,KAAM,CAAEV,MAAM,CAAED,OAAO,CAAEY,IAAK,CAAC,CAAGpB,QAAQ,CAACU,IAAI,CAC/C3B,YAAY,CAACI,QAAQ,CAACsB,MAAM,CAAC,CAC7B1B,YAAY,CAACQ,eAAe,CAACiB,OAAO,CAAC,CACrC,MAAO,CAAEC,MAAM,CAAED,OAAO,CAAEY,IAAK,CAAC,CAClC,CAAC,CAEDC,QAAQ,CAAE,KAAO,CAAAC,QAAsB,EAAoB,CACzD,KAAM,CAAAtB,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAAC8B,IAAI,CAAC,iBAAiB,CAAEe,QAAQ,CAAC,CAC5D,MAAO,CAAAtB,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDa,MAAM,CAAEA,CAAA,GAAM,CACZxC,YAAY,CAACS,WAAW,CAAC,CAAC,CAC5B,CAAC,CAEDgC,UAAU,CAAE,KAAAA,CAAA,GAA2B,CACrC,KAAM,CAAAxB,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACgD,GAAG,CAAC,gBAAgB,CAAC,CAChD,MAAO,CAAAzB,QAAQ,CAACU,IAAI,CACtB,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAgB,aAAa,CAAG,CAC3BC,MAAM,CAAE,KAAAA,CAAA,GAAwC,CAC9C,KAAM,CAAA3B,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACgD,GAAG,CAAC,cAAc,CAAC,CAC9C,MAAO,CAAAzB,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDhC,MAAM,CAAE,KAAO,CAAAkD,YAAuE,EAA+B,CACnH,KAAM,CAAA5B,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAAC8B,IAAI,CAAC,cAAc,CAAEqB,YAAY,CAAC,CAC7D,MAAO,CAAA5B,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDmB,MAAM,CAAE,KAAAA,CAAOC,EAAU,CAAEF,YAAsC,GAA+B,CAC9F,KAAM,CAAA5B,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACsD,GAAG,gBAAAhC,MAAA,CAAgB+B,EAAE,MAAKF,YAAY,CAAC,CAClE,MAAO,CAAA5B,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDsB,MAAM,CAAE,KAAO,CAAAF,EAAU,EAAoB,CAC3C,KAAM,CAAArD,GAAG,CAACuD,MAAM,gBAAAjC,MAAA,CAAgB+B,EAAE,KAAG,CAAC,CACxC,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,WAAW,CAAG,CACzBN,MAAM,CAAE,KAAO,CAAAO,OAAwB,EAAyB,CAC9D,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CACpC,GAAIF,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEG,MAAM,CAAEF,MAAM,CAACG,MAAM,CAAC,QAAQ,CAAEJ,OAAO,CAACG,MAAM,CAAC,CAC5D,GAAIH,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEK,QAAQ,CAAEJ,MAAM,CAACG,MAAM,CAAC,UAAU,CAAEJ,OAAO,CAACK,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC,CAC7E,GAAIN,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEO,OAAO,CAAEN,MAAM,CAACG,MAAM,CAAC,UAAU,CAAEJ,OAAO,CAACO,OAAO,CAAC,CAEhE,KAAM,CAAAzC,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACgD,GAAG,eAAA1B,MAAA,CAAeoC,MAAM,CAACK,QAAQ,CAAC,CAAC,CAAE,CAAC,CACjE,MAAO,CAAAxC,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDgC,OAAO,CAAE,KAAO,CAAAZ,EAAU,EAAuB,CAC/C,KAAM,CAAA9B,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACgD,GAAG,cAAA1B,MAAA,CAAc+B,EAAE,KAAG,CAAC,CAClD,MAAO,CAAA9B,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDhC,MAAM,CAAE,KAAO,CAAAiE,WAMd,EAAuB,CACtB,KAAM,CAAA3C,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAAC8B,IAAI,CAAC,YAAY,CAAEoC,WAAW,CAAC,CAC1D,MAAO,CAAA3C,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDmB,MAAM,CAAE,KAAAA,CAAOC,EAAU,CAAEa,WAM1B,GAAuB,CACtB,KAAM,CAAA3C,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACsD,GAAG,cAAAhC,MAAA,CAAc+B,EAAE,MAAKa,WAAW,CAAC,CAC/D,MAAO,CAAA3C,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDsB,MAAM,CAAE,KAAO,CAAAF,EAAU,EAAoB,CAC3C,KAAM,CAAArD,GAAG,CAACuD,MAAM,cAAAjC,MAAA,CAAc+B,EAAE,KAAG,CAAC,CACtC,CAAC,CAEDc,UAAU,CAAE,KAAO,CAAAV,OAAwB,EAAyB,CAClE,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CACpC,GAAIF,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEG,MAAM,CAAEF,MAAM,CAACG,MAAM,CAAC,QAAQ,CAAEJ,OAAO,CAACG,MAAM,CAAC,CAC5D,GAAIH,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEK,QAAQ,CAAEJ,MAAM,CAACG,MAAM,CAAC,UAAU,CAAEJ,OAAO,CAACK,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC,CAC7E,GAAIN,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEW,UAAU,CAAEV,MAAM,CAACG,MAAM,CAAC,YAAY,CAAEJ,OAAO,CAACW,UAAU,CAAC,CACxE,GAAIX,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEY,QAAQ,CAAEX,MAAM,CAACG,MAAM,CAAC,UAAU,CAAEJ,OAAO,CAACY,QAAQ,CAAC,CAClE,GAAIZ,OAAO,SAAPA,OAAO,WAAPA,OAAO,CAAEO,OAAO,CAAEN,MAAM,CAACG,MAAM,CAAC,SAAS,CAAEJ,OAAO,CAACO,OAAO,CAAC,CAE/D,KAAM,CAAAzC,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACgD,GAAG,uBAAA1B,MAAA,CAAuBoC,MAAM,CAACK,QAAQ,CAAC,CAAC,CAAE,CAAC,CACzE,MAAO,CAAAxC,QAAQ,CAACU,IAAI,CACtB,CAAC,CAEDqC,QAAQ,CAAE,KAAAA,CAAA,GAAY,CACpB,KAAM,CAAA/C,QAAQ,CAAG,KAAM,CAAAvB,GAAG,CAACgD,GAAG,CAAC,kBAAkB,CAAC,CAClD,MAAO,CAAAzB,QAAQ,CAACU,IAAI,CACtB,CACF,CAAC,CAED,cAAe,CAAAjC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}